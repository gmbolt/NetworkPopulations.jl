var documenterSearchIndex = {"docs":
[{"location":"interaction_networks/intro/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"interaction_networks/intro/","page":"Overview","title":"Overview","text":"This is an implementation of the methodology and computational schemes proposed by Bolt et al. (2022)[1] to model samples of interaction networks. With this package one can ","category":"page"},{"location":"interaction_networks/intro/","page":"Overview","title":"Overview","text":"Instantiate models\nConstruct posteriors for model parameters \nSample from them via MCMC ","category":"page"},{"location":"interaction_networks/intro/#References","page":"Overview","title":"References","text":"","category":"section"},{"location":"interaction_networks/intro/","page":"Overview","title":"Overview","text":"[1]: Bolt, G., Lunagómez, S., & Nemeth, C. (2022). Modelling Populations of Interaction Networks via Distance Metrics. arXiv preprint arXiv:2206.09995.","category":"page"},{"location":"interaction_networks/samplers/#MCMC-samplers","page":"MCMC samplers","title":"MCMC samplers","text":"","category":"section"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"We use iMCMC (reference)\nWorkflow \nConstruct a move (this can be a mixture of a few)\nConstruct a sampler with given move\nCall sampler on model","category":"page"},{"location":"interaction_networks/samplers/#iMCMC-sampler","page":"MCMC samplers","title":"iMCMC sampler","text":"","category":"section"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"The sampler for SIS and SIM models is define by instantiating a InvMcmcSampler type, which essentially wraps a passed iMCMC move (see section on moves below). ","category":"page"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"InvMcmcSampler","category":"page"},{"location":"interaction_networks/samplers/#NetworkPopulations.InvMcmcSampler","page":"MCMC samplers","title":"NetworkPopulations.InvMcmcSampler","text":"InvMcmcSampler(move::InvMcmcMove; kwargs...)\n\niMCMC sampler for SIS and SIM models using given iMCMC move.\n\n\n\n\n\n","category":"type"},{"location":"interaction_networks/samplers/#iMCMC-moves","page":"MCMC samplers","title":"iMCMC moves","text":"","category":"section"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"We have various different moves, each of which can define a sampler. However, we also have a mixture move which can combine any two moves together. In this way, multiple moves can be flexibly combined in various ways. ","category":"page"},{"location":"interaction_networks/samplers/#Mixture-moves","page":"MCMC samplers","title":"Mixture moves","text":"","category":"section"},{"location":"interaction_networks/samplers/#Defining-moves","page":"MCMC samplers","title":"Defining moves","text":"","category":"section"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"One can define a new move by sub-typing InvMcmcMove and defining the following methods","category":"page"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"","category":"page"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"This new move can then be mixed with others via the InvMcmcMixturMove and used within model and posterior samplers.","category":"page"},{"location":"interaction_networks/samplers/#Plotting","page":"MCMC samplers","title":"Plotting","text":"","category":"section"},{"location":"interaction_networks/samplers/","page":"MCMC samplers","title":"MCMC samplers","text":"Plot recipes visualise MCMC outputs ","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Model-Sampling","page":"Examples","title":"Model Sampling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"<!– ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using NetworkPopulations, Distributions \nmodel_mode = Hollywood(-3.0, Poisson(7), 10)\nS = sample(model_mode, 10)\nV = collect(1:10)\nd = FastGED(FastLCS(21),21)\nmodel = SIS(S, 5.5, d, V, 20, 20)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now we define sampler ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"path_proposal = PathPseudoUniform(model.V, TrGeometric(0.5, 1, model.K_inner))\nmcmc_sampler = SisMcmcInsertDelete(\n    path_proposal, \n    K=model.K_inner, \n    ν_ed=1, ν_td=1, β=0.7\n    )\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"And call it ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\nmcmc_out = mcmc_sampler(model)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"And plot it ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"plot(mcmc_out)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"...increase lag and burn-in for better samples...","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"mcmc_out = mcmc_sampler(\n    model, \n    desired_samples=1000, \n    burn_in=1000, lag=50\n    )\nplot(mcmc_out)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"–>","category":"page"},{"location":"networks/intro/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"networks/intro/","page":"Overview","title":"Overview","text":"This is an implementation of the methodology and computational schemes proposed by Lunagómez et al. (2021)[1] to model samples of networks. With this package one can ","category":"page"},{"location":"networks/intro/","page":"Overview","title":"Overview","text":"Instantiate models\nConstruct posteriors for model parameters \nSample from them via MCMC ","category":"page"},{"location":"networks/intro/#References","page":"Overview","title":"References","text":"","category":"section"},{"location":"networks/intro/","page":"Overview","title":"Overview","text":"[1]: Lunagómez, S., Olhede, S. C., & Wolfe, P. J. (2021). Modeling network populations via graph distances. Journal of the American Statistical Association, 116(536), 2023-2040.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [NetworkPopulations]","category":"page"},{"location":"reference/#NetworkPopulations.InitMode","page":"Reference","title":"NetworkPopulations.InitMode","text":"InitMode <: McmcInitialiser - this is a MCMC initialisation scheme for SIS model samplers which starts the MCMC chain at the model mode by default.\n\n\n\n\n\n","category":"type"},{"location":"reference/#NetworkPopulations.McmcInitialiser","page":"Reference","title":"NetworkPopulations.McmcInitialiser","text":"Abstract type representing initialisation schemes for SIS model samplers. \n\n\n\n\n\n","category":"type"},{"location":"reference/#NetworkPopulations.ScaledBeta","page":"Reference","title":"NetworkPopulations.ScaledBeta","text":"Scaled Beta distribution. Instantiate with ScaledBeta() e.g.\n\nd = ScaledBeta(α, β, 0.0, 10.0)\n\nwould make a ScaledBeta type d which is bounded by 0.0 and 10.0. Note\n\n(α,β) are usual parameters;\nlb = lower bound;\nub = upper bound.\n\n\n\n\n\n","category":"type"},{"location":"reference/#NetworkPopulations.TrGeometric","page":"Reference","title":"NetworkPopulations.TrGeometric","text":"TrGeomtric(p::Float64, lb::Int, ub::Int) \n\nTruncated Geometric distribution. Note:\n\nlb = lower bound = samllest possible value (default=0)\nub = upper bound = largest possible value.\n\nInstantiation:\n\nTrGeometric(p, ub) -  here lb defaults to 0\nTrGeometric(p, lb, ub) here lb is specified\n\n\n\n\n\n","category":"type"},{"location":"reference/#NetworkPopulations.KL_error-Tuple{SimMcmcOutput, Dict}","page":"Reference","title":"NetworkPopulations.KL_error","text":"KL_error(output::SimMcmcOutput, true_dist::Dict)\n\nTakes the true distribution, as represented by a dictionary, as an additional parameter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.KL_error-Tuple{SisMcmcOutput, Dict}","page":"Reference","title":"NetworkPopulations.KL_error","text":"KL_error(output::SisMcmcOutput, true_dist::Dict)\n\nTakes the true distribution, as represented by a dictionary, as an additional parameter.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.KL_error-Tuple{SisMcmcOutput}","page":"Reference","title":"NetworkPopulations.KL_error","text":"KL_error(output::SisMcmcOutput)\n\nFind the KL-divergence between the true distribution and the approximation obtained via the MCMC sample output. \n\nThat is, if π(mathcalS) is the true distribution and tildepi(mathcalS) is the approximation then this function will return \n\nsum_mathcalS tildepi(mathcalS) logleft( fractildepi(mathcalS)pi(mathcalS)right)\n\nwhere we assume that 0 cdot log(0) = 0.  \n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.cardinality-Tuple{SIS}","page":"Reference","title":"NetworkPopulations.cardinality","text":"Calculate the sample space cardinality.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.cardinality-Tuple{SPF}","page":"Reference","title":"NetworkPopulations.cardinality","text":"Calculate the sample space cardinality.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.draw_sample!-Tuple{Union{SubArray, Vector{Vector{Vector{Int64}}}}, SimMcmcInsertDeleteProportional, SIM}","page":"Reference","title":"NetworkPopulations.draw_sample!","text":"draw_sample!(\n    sample_out::InteractionSequenceSample, \n    mcmc::SimMcmcInsertDeleteProportional, \n    model::SIM;\n    burn_in::Int=mcmc.burn_in,\n    lag::Int=mcmc.lag,\n    init::InteractionSequence=get_init(model, mcmc.init)\n)\n\nDraw sample in-place from given SIM model model::SIM via MCMC algorithm with edit allocation and interaction insertion/deletion, storing output in sample_out::InteractionSequenceSample. \n\nAccepts keyword arguments to change MCMC output, including burn-in, lag and initial values. If not given, these are set to the default values of the passed MCMC sampler mcmc::SimMcmcInsertDelete.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.draw_sample!-Tuple{Union{SubArray, Vector{Vector{Vector{Int64}}}}, SimMcmcInsertDeleteSubpath, SIM}","page":"Reference","title":"NetworkPopulations.draw_sample!","text":"draw_sample!(\n    sample_out::InteractionSequenceSample, \n    mcmc::SimMcmcInsertDeleteSubpath, \n    model::SIM;\n    burn_in::Int=mcmc.burn_in,\n    lag::Int=mcmc.lag,\n    init::InteractionSequence=get_init(model, mcmc.init)\n)\n\nDraw sample in-place from given SIM model model::SIM via MCMC algorithm with edit allocation and interaction insertion/deletion, storing output in sample_out::InteractionSequenceSample. \n\nAccepts keyword arguments to change MCMC output, including burn-in, lag and initial values. If not given, these are set to the default values of the passed MCMC sampler mcmc::SimMcmcInsertDelete.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.draw_sample!-Tuple{Union{SubArray, Vector{Vector{Vector{Int64}}}}, SisMcmcInsertDelete, SIS}","page":"Reference","title":"NetworkPopulations.draw_sample!","text":"draw_sample!(\n    sample_out::InteractionSequenceSample, \n    mcmc::SisMcmcInsertDelete, \n    model::SIS;\n    burn_in::Int=mcmc.burn_in,\n    lag::Int=mcmc.lag,\n    init::InteractionSequence=get_init(model, mcmc.init)\n)\n\nDraw sample in-place from given SIS model model::SIS via MCMC algorithm with edit allocation and interaction insertion/deletion, storing output in sample_out::InteractionSequenceSample. \n\nAccepts keyword arguments to change MCMC output, including burn-in, lag and initial values. If not given, these are set to the default values of the passed MCMC sampler mcmc::SisMcmcInsertDelete.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.draw_sample!-Tuple{Union{SubArray, Vector{Vector{Vector{Int64}}}}, SisMcmcSplitMerge, SIS}","page":"Reference","title":"NetworkPopulations.draw_sample!","text":"draw_sample!(\n    sample_out::InteractionSequenceSample, \n    mcmc::SisMcmcSplitMerge, \n    model::SIS;\n    burn_in::Int=mcmc.burn_in,\n    lag::Int=mcmc.lag,\n    init::InteractionSequence=get_init(model, mcmc.init)\n)\n\nDraw sample in-place from given SIS model model::SIS via MCMC algorithm with edit allocation and interaction insertion/deletion, storing output in sample_out::InteractionSequenceSample. \n\nAccepts keyword arguments to change MCMC output, including burn-in, lag and initial values. If not given, these are set to the default values of the passed MCMC sampler mcmc::SisMcmcInsertDelete.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.draw_sample!-Union{Tuple{T}, Tuple{Union{SubArray, Vector{Vector{Vector{Int64}}}}, T, SIM}} where T<:SimMcmcSampler","page":"Reference","title":"NetworkPopulations.draw_sample!","text":"draw_sample!(\n    sample_out::InteractionSequenceSample, \n    mcmc::SimMcmcInsertDelete, \n    model::SIM;\n    burn_in::Int=mcmc.burn_in,\n    lag::Int=mcmc.lag,\n    init::InteractionSequence=get_init(model, mcmc.init)\n)\n\nDraw sample in-place from given SIM model model::SIM via MCMC algorithm with edit allocation and interaction insertion/deletion, storing output in sample_out::InteractionSequenceSample. \n\nAccepts keyword arguments to change MCMC output, including burn-in, lag and initial values. If not given, these are set to the default values of the passed MCMC sampler mcmc::SimMcmcInsertDelete.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.draw_sample-Tuple{SisMcmcInsertDelete, SIS}","page":"Reference","title":"NetworkPopulations.draw_sample","text":"draw_sample(\n    mcmc::SisMcmcInsertDelete, \n    model::SIS;\n    desired_samples::Int=mcmc.desired_samples, \n    burn_in::Int=mcmc.burn_in,\n    lag::Int=mcmc.lag,\n    init::Vector{Path{T}}=get_init(model, mcmc.init)\n    )\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.draw_sample-Tuple{SisMcmcSplitMerge, SIS}","page":"Reference","title":"NetworkPopulations.draw_sample","text":"draw_sample(\n    mcmc::SisMcmcInsertDelete, \n    model::SIS;\n    desired_samples::Int=mcmc.desired_samples, \n    burn_in::Int=mcmc.burn_in,\n    lag::Int=mcmc.lag,\n    init::Vector{Path{T}}=get_init(model, mcmc.init)\n    )\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.eachinterseq-Union{Tuple{T}, Tuple{Vector{T}, Int64, Int64}} where T<:Union{Int64, String}","page":"Reference","title":"NetworkPopulations.eachinterseq","text":"eachinterseq(V, K, L) \n\nReturns an iterator over all interaction sequences over the vertex set V, with dimension bounds defined by K and L, specifically \n\nV = vertex set, must be a vector of unique strings or integers;\nK = max interaction length, must be an integer;\nL = max number of interactions, must be an integer.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.get_normalising_const-Tuple{SPF}","page":"Reference","title":"NetworkPopulations.get_normalising_const","text":"Calculate the true normalising constant. \n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.get_path_sequences-Tuple{DataFrames.GroupedDataFrame}","page":"Reference","title":"NetworkPopulations.get_path_sequences","text":"Given a DataFrames.GroupedDataFrame object and some time threshold of type Dates.TimePeriod this will convert the data to interaction sequences. \n\nColumn names for vertex labels and timestamps are passed names arguments.\n\nNote the time column must be of type Dates.DateTime.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.get_sample_space-Tuple{SIS}","page":"Reference","title":"NetworkPopulations.get_sample_space","text":"Returns vector with all elements in the sample space.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.get_sample_space-Tuple{SPF}","page":"Reference","title":"NetworkPopulations.get_sample_space","text":"Returns vector with all elements in the sample space.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.get_vertex_counts-Tuple{DataFrames.GroupedDataFrame}","page":"Reference","title":"NetworkPopulations.get_vertex_counts","text":"Takes a GroupedDataFrame and a string indicating column name for vertex labels, outputs a Vector{Multiset}, that is, a multisets of vertex counts for each group in the data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.multigraph_edge_list-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Union{Int64, String}","page":"Reference","title":"NetworkPopulations.multigraph_edge_list","text":"multigraph_edge_list(x::Path)\n\nThis is a helper function which can be used in conjunction with GraphRecipes.graphplot() to visualise a path.\n\nOutput is tuple (edge_list, label_map) where \n\nedge_list::Vector{Vector{Int}} describes all edges, whereby edgelist[1] stores all edges starting at node 1, edgelist[2] those starting at 2 and so on...\nlabel_map::Dict this maps the integer labels of nodes back to the of the input data, e.g. label_map[1] = \"a\" means node 1 represents the vertex \"a\" in the path p. \n\nTo plot path with labels call\n\ngraphplot(edge_list, names=label_map)\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.pmf_unormalised-Tuple{Union{SIM, SIS}, Vector{Vector{Int64}}}","page":"Reference","title":"NetworkPopulations.pmf_unormalised","text":"Evaluate the unormalised probability of an interaction seq x\n\n\n\n\n\n","category":"method"},{"location":"reference/#NetworkPopulations.string_to_int-Tuple{Vector{Vector{String}}, Dict{String, Int64}}","page":"Reference","title":"NetworkPopulations.string_to_int","text":"string_to_int(::InteractionSequence{String}, ::Dict{String,Int})\n\nTakes `S::InteractionSequence{String}` and outputs a value of type `InteractionSequence{Int}` by applying the map encoded via the dictionary `mapper::Dict{String,Int}`.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = NetworkPopulations","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This is documentation for the NetworkPopulations.jl package. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Some inline latex x^2 ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"p(S E^m gamma) propto exp-gamma d_E(mathcalE mathcalE^m)\n","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"get_normalising_const(::SIS)","category":"page"},{"location":"#NetworkPopulations.get_normalising_const-Tuple{SIS}","page":"Introduction","title":"NetworkPopulations.get_normalising_const","text":"Calculate the normalising constant of SIS\n\n\n\n\n\n","category":"method"},{"location":"","page":"Introduction","title":"Introduction","text":"function(x)\n    print(x)\nend     ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Plots, Random # hide\nRandom.seed!(1) # hide\na = 1\nb = 2\na + b\nplot(rand(11))","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nThe work network can mean different things to different people.","category":"page"}]
}
